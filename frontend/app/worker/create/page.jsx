"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Header from "../../header/Header";

export default function CreateWorkerPage() {
  const router = useRouter();
  
  const [role, setRole] = useState("confectioner");
  const [district, setDistrict] = useState("sheikh_mansurovsky");
  const [name, setName] = useState("");
  const [address, setAddress] = useState("");
  const [phone, setPhone] = useState("+337 77 77 77 77");
  const [password, setPassword] = useState("");
  const [telegramToken, setTelegramToken] = useState("");

  useEffect(() => {
    setTelegramToken(generateToken());
  }, []);

  const generateToken = () => {
    return Math.random().toString(36).substr(2, 10);
  };

  const handleSubmit = async () => {
    const workerData = { role, district, name, address, phone, password, telegramToken };
<<<<<<< HEAD
    try {
      const response = await fetch("http://localhost/api/profiles/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Token 6578881f25b133aa817d7d8bb6c2a07b90e4bcff`
        },
        body: JSON.stringify(workerData),
      });
      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö");
      }
      const data = await response.json();
      console.log("–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ:", data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
    }
=======
    console.log("Saving worker:", workerData);
>>>>>>> 4209af87ea2b0c413d53f4d274e4f86a5c625e14
  };

  return (
    <div>
<<<<<<< HEAD
      <Header />
      <div className="flex">
        <div className="flex items-start min-h-screen bg-[#003C46] text-white px-[3.056vw] mt-[5vw]">
          <div className="flex items-center mr-[18.056vw]">
            <button className="mr-[6.667vw]" onClick={() => router.back()}>
              <img src="../../images/icons/iconButton.svg" alt="–ù–∞–∑–∞–¥" className="w-[3.056vw] h-[3.056vw]" />
            </button>
            <h1 className="text-[3.889vw] leading-[4.167vw]">–°–æ–∑–¥–∞–Ω–∏–µ <br/> —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</h1>
          </div>
          <div className="bg-[#ffffff08] p-6 rounded-lg max-w-md">
            <div className="mb-4">
              <label className="text-sm block mb-1">–ò–ú–Ø –†–ê–ë–û–¢–ù–ò–ö–ê</label>
              <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è" value={name} onChange={(e) => setName(e.target.value)} className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400" />
            </div>
            <div className="mb-4">
              <label className="text-sm block mb-1">–ê–î–†–ï–°</label>
              <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å" value={address} onChange={(e) => setAddress(e.target.value)} className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400" />
            </div>
            <div className="mb-4">
              <label className="text-sm block mb-1">–ù–û–ú–ï–†</label>
              <input type="text" value={phone} onChange={(e) => setPhone(e.target.value)} className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400" />
            </div>
            <div className="mb-4">
              <label className="text-sm block mb-1">–ü–ê–†–û–õ–¨</label>
              <input type="password" placeholder="–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å" value={password} onChange={(e) => setPassword(e.target.value)} className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400" />
            </div>
            <div className="mb-4">
              <label className="text-sm block mb-1">TELEGRAM –¢–û–ö–ï–ù</label>
              <input type="text" value={telegramToken} readOnly className="w-full p-3 rounded bg-transparent border border-white/20 text-white" />
            </div>
            <button className="mt-6 bg-[#53CFBA] text-[#003C46] px-6 py-3 rounded-lg text-lg" onClick={handleSubmit}>
              –°–æ–∑–¥–∞—Ç—å
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
=======

 
      <Header />
      <div className="flex">
      <div className=" flex items-start min-h-screen bg-[#003C46] text-white px-[3.056vw] mt-[5vw]">
       <div className="flex items-center mr-[18.056vw]">
        {/* –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ */}
        <button className="mr-[6.667vw]" onClick={() => router.back()}>
                <img src="../../images/icons/iconButton.svg" alt="–ù–∞–∑–∞–¥" className="w-[3.056vw] h-6[3.056vw]" />
            </button>

            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <h1 className="text-[3.889vw] leading-[4.167vw]  ">–°–æ–∑–¥–∞–Ω–∏–µ <br/> —Ä–∞–±–æ—Ç–Ω–∏–∫–∞</h1>
        </div>
     {/*  */}
        <div>
{/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ */}
<p className="text-[1.667vw] mb-[1.389vw]">–†–æ–ª—å</p>
      <div className="flex  mb-[2.778vw]">
        {[
          { id: "confectioner", name: "–ö–æ–Ω–¥–∏—Ç–µ—Ä" },
          { id: "courier", name: "–ö—É—Ä—å–µ—Ä" }
        ].map(r => (
          <button
            key={r.id}
            className={`px-[1.667vw] font-[500] py-[0.972vw] rounded-full text-[1.111vw] mr-[0.833vw] ${
              role === r.id ? "bg-white text-[#003C46] font-[500]" : "border border-white/20 text-white "
            }`}
            onClick={() => setRole(r.id)}
          >
            {r.name}
          </button>
        ))}
      </div>

      {/* –í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ */}
      <p className="text-[1.667vw] mb-[1.389vw]">–†–∞–π–æ–Ω —Ä–∞–±–æ—Ç—ã</p>
      <div className="flex mr-[0.833vw] mb-[2.778vw]">
        {[
          { id: "sheikh_mansurovsky", name: "–®–µ–π—Ö –ú–∞–Ω—Å—É—Ä–æ–≤—Å–∫–∏–π" },
          { id: "baisangurovsky", name: "–ë–∞—Å–∞–π–Ω–≥—É—Ä–æ–≤—Å–∫–∏–π" },
          { id: "akhmatovsky", name: "–ê—Ö–º–∞—Ç–æ–≤—Å–∫–∏–π" }
        ].map(d => (
          <button
            key={d.id}
            className={`px-[1.667vw] py-[0.972vw] rounded-full text-[1.111vw] mr-[0.833vw] ${
              district === d.id ? "bg-white text-[#003C46]" : "border border-white/20 text-white"
            }`}
            onClick={() => setDistrict(d.id)}
          >
            {d.name}
          </button>
        ))}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <p className="text-[1.667vw] mb-[1.389vw]">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</p>
      <div className="bg-[#ffffff08] p-6 rounded-lg max-w-md">
        <div className="mb-4">
          <label className="text-sm block mb-1">–ò–ú–Ø –†–ê–ë–û–¢–ù–ò–ö–ê</label>
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
            className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400"
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
        </div>

        <div className="mb-4">
          <label className="text-sm block mb-1">–ê–î–†–ï–°</label>
          <input
            type="text"
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å"
            className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
          />
        </div>

        <div className="mb-4">
          <label className="text-sm block mb-1">–ù–û–ú–ï–†</label>
          <div className="relative">
            <input
              type="text"
              className="w-full p-3 pl-10 rounded bg-transparent border border-white/20 text-white placeholder-gray-400"
              value={phone}
              onChange={(e) => setPhone(e.target.value)}
            />
            <span className="absolute left-3 top-3">üá´üá∑</span>
          </div>
        </div>

        <div className="mb-4 relative">
          <label className="text-sm block mb-1">–ü–ê–†–û–õ–¨</label>
          <div className="relative">
            <input
              type="password"
              placeholder="–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
              className="w-full p-3 rounded bg-transparent border border-white/20 text-white placeholder-gray-400"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
            <img
              className="absolute right-3 top-3 cursor-pointer w-5 h-5"
              src="../images/icons/eye.svg"
              alt="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å"
            />
          </div>
        </div>

        <div className="mb-4 relative">
          <label className="text-sm block mb-1">TELEGRAM –¢–û–ö–ï–ù</label>
          <div className="relative">
            <input
              type="text"
              value={telegramToken}
              readOnly
              className="w-full p-3 rounded bg-transparent border border-white/20 text-white"
            />
            <img
              className="absolute right-3 top-3 cursor-pointer w-5 h-5"
              src="../images/icons/copy.svg"
              alt="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω"
              onClick={() => navigator.clipboard.writeText(telegramToken)}
            />
          </div>
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –°–æ–∑–¥–∞—Ç—å */}
      <button
        className="mt-6 bg-[#53CFBA] text-[#003C46] px-6 py-3 rounded-lg text-lg"
        onClick={handleSubmit}
      >
        –°–æ–∑–¥–∞—Ç—å
      </button>
        </div>


      {/*  */}

    </div>
      </div>
   
    </div>
  );
}
>>>>>>> 4209af87ea2b0c413d53f4d274e4f86a5c625e14
