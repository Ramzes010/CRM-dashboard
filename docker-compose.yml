
services:
  backend:
    build: ./backend
    restart: always
    command: bash -c "wait-for-it db:5432 -- python manage.py collectstatic --noinput && python manage.py makemigrations picheni --noinput && python manage.py migrate --noinput && gunicorn core.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
    networks:
      - ingress-routing
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      retries: 3
      start_period: 30s
      timeout: 10s

  frontend:
    build: ./frontend
    restart: always
    depends_on:
      - backend  # Зависимость от backend
    networks:
      - ingress-routing
    ports:
      - "3000:3000"
    command: npm run dev

  bot:
    build: ./backend
    command: ["python", "/app/picheni/bot.py"]
    working_dir: /app
    volumes:
      - ./backend:/app
    networks:
      - ingress-routing
    depends_on:
      - backend
    env_file:
      - ./backend/picheni/.env  # Указываем путь к .env




  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: picheni
      POSTGRES_USER: admin@picheni
      POSTGRES_PASSWORD: dc3u8747yf9430sf999___004
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    networks:
      - ingress-routing

  nginx:
    image: nginx:latest
    container_name: nginx_aix
    volumes:
      - .:/app
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/static  # Подключаем статические файлы
      - media_volume:/app/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - ingress-routing

  redis:
    image: redis:latest
    restart: always
    networks:
      - ingress-routing
    ports:
      - "6379:6379"  # Экспонируем порт Redis на 6379
networks:
  ingress-routing:

volumes:
  postgres_data:
  static_volume:
  media_volume:
