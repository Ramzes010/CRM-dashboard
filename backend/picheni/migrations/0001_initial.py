<<<<<<< HEAD
# Generated by Django 4.2.5 on 2025-01-16 16:10
=======
# Generated by Django 4.2.5 on 2024-11-04 18:27
>>>>>>> 8a94f8bfa642c42db20f0d2c7b12c7b78eba4d2f

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
<<<<<<< HEAD
import phonenumber_field.modelfields
=======
>>>>>>> 8a94f8bfa642c42db20f0d2c7b12c7b78eba4d2f


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('status', models.BooleanField(default=False)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('role', models.CharField(choices=[('confectioner', 'Кондитер'), ('courier', 'Курьер')], max_length=20)),
                ('fullname', models.CharField(max_length=255)),
<<<<<<< HEAD
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('telegram_token', models.CharField(blank=True, max_length=255, unique=True)),
                ('telegram_user_id', models.CharField(blank=True, max_length=255, null=True)),
=======
                ('phone_number', models.CharField(max_length=15, unique=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('telegram_token', models.CharField(blank=True, max_length=255, unique=True)),
>>>>>>> 8a94f8bfa642c42db20f0d2c7b12c7b78eba4d2f
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cookie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='cookies/')),
                ('compressed_image', models.ImageField(blank=True, null=True, upload_to='cookies/compressed/')),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Franchising',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
<<<<<<< HEAD
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None)),
=======
                ('phone', models.CharField(max_length=30)),
>>>>>>> 8a94f8bfa642c42db20f0d2c7b12c7b78eba4d2f
                ('email', models.EmailField(max_length=254)),
                ('country', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('new', 'Новый'), ('issued', 'Оформлен'), ('crafting', 'Крафтится'), ('crafted', 'Скрафчен'), ('picking_up', 'Забирается'), ('delivering', 'Доставляется'), ('delivered', 'Доставлен')], default='new', max_length=20)),
                ('crafting_time', models.DurationField(blank=True, null=True)),
                ('delivery_time', models.DurationField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('address', models.CharField(max_length=255)),
                ('phone', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content', models.JSONField()),
                ('google_maps_link', models.URLField(blank=True, max_length=255, null=True)),
                ('confectioner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders_created', to=settings.AUTH_USER_MODEL)),
                ('courier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders_delivered', to=settings.AUTH_USER_MODEL)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='picheni.district')),
            ],
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('box_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('image', models.ImageField(upload_to='boxes/')),
                ('cookies', models.ManyToManyField(blank=True, related_name='boxes', to='picheni.cookie')),
            ],
        ),
        migrations.AddField(
            model_name='userprofile',
            name='district',
<<<<<<< HEAD
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='picheni.district'),
=======
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='picheni.district'),
>>>>>>> 8a94f8bfa642c42db20f0d2c7b12c7b78eba4d2f
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
